#!/usr/bin/python
# -*- mode: python; coding: utf-8 -*-
"""
Usage: httperr [OPTIONS] [STATUS [STATUS …]]

positional arguments:
  STATUS           HTTP status code or pattern

optional arguments:
  -h, --help       show this help message and exit
  -v, --version    show version information and exit
  -c, --copyright  show copying policy and exit
"""
##############################################################################
# This program is free software; you can redistribute it and/or modify it    #
# under the terms of the GNU General Public License as published by the Free #
# Software Foundation; either version 3 of the License, or (at your option)  #
# any later version.                                                         #
#                                                                            #
# This program is distributed in the hope that it will be useful, but with-  #
# out any warranty; without even the implied warranty of merchantability or  #
# fitness for a particular purpose.  See the GNU General Public License for  #
# more details.  <http://gplv3.fsf.org/>                                     #
##############################################################################

from __future__ import print_function, unicode_literals

import sys
import os
import argparse
import re

if sys.version_info < (3, 0):
    from httplib import responses
else:
    from http.client import responses

try:
    from locale import (setlocale, LC_ALL, Error)
    _ = setlocale(LC_ALL, '')
except (ImportError, NameError, Error):
    pass

__author__ = 'Klaus Alexander Seistrup <klaus@seistrup.dk>'
__revision__ = '2015-08-15'
__version__ = '0.2.0 (%s)' % __revision__
__copyright__ = """\
httperr %s
Copyright © 2012−15 Klaus Alexander Seistrup <klaus@seistrup.dk>

This is free software; see the source for copying conditions.  There is no
warranty; not even for merchantability or fitness for a particular purpose.

Fork me on Github: https://github.com/kseistrup/httperr
""" % (__version__,)

RESPONSES = dict([(str(code), desc) for (code, desc) in responses.items()])


def reformat(old):
    """Get rid of ugly Title Case"""
    elms = old.split(None, 1)
    if elms[0] not in ('HTTP', 'OK', 'Request-URI'):
        return old.capitalize()
    if len(elms) == 1:
        return old
    return ' '.join((elms[0], elms[1].lower()))


def main(progname='httperr'):
    """Main entry point"""
    (stdin, stderr) = (sys.stdin, sys.stderr)

    parser = argparse.ArgumentParser(
        prog=progname,
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s/' + __version__,
                        help='show version information and exit')
    parser.add_argument('-c', '--copyright', action='version',
                        version=__copyright__,
                        help='show copying policy and exit')
    parser.add_argument('STATUS', nargs='*', help='HTTP status code/pattern')

    args = parser.parse_args()

    statuses = args.STATUS or stdin.read().split()

    return_code = 0

    cache = {}

    def error(message, blame):
        """Print an error message to stderr"""
        print('{1}\t{0}'.format(message, blame), file=stderr)

    for status in statuses:
        if status.isdigit() and len(status) == 3:
            desc = RESPONSES.get(status, None)
            if desc is None:
                error('Unrecognized status code', status)
                return_code = 1
                continue
            if status not in cache:
                cache[status] = desc
        else:
            pattern = re.compile(status, re.IGNORECASE)
            found = False
            for (code, desc) in RESPONSES.items():
                if pattern.search(code) is None:
                    if pattern.search(desc) is None:
                        continue
                found = True
                if code not in cache:
                    cache[code] = desc
            if not found:
                error('Unrecognized pattern', status)
                return_code = 1

    for code in sorted(cache.keys()):
        print('{0}\t{1}'.format(code, reformat(cache[code])))

    return return_code

if __name__ == '__main__':
    sys.exit(main(os.path.basename(sys.argv[0])))

# eof
